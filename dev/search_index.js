var documenterSearchIndex = {"docs":
[{"location":"generated/Continuous-time Controlled Invariant Set/","page":"Continuous-time Controlled Invariant Set","title":"Continuous-time Controlled Invariant Set","text":"EditURL = \"https://github.com/blegat/SetProg.jl/blob/master/docs/src/examples/Continuous-time Controlled Invariant Set.jl\"","category":"page"},{"location":"generated/Continuous-time Controlled Invariant Set/#Continuous-time-Controlled-Invariant-Set","page":"Continuous-time Controlled Invariant Set","title":"Continuous-time Controlled Invariant Set","text":"","category":"section"},{"location":"generated/Continuous-time Controlled Invariant Set/","page":"Continuous-time Controlled Invariant Set","title":"Continuous-time Controlled Invariant Set","text":"(Image: Binder) (Image: nbviewer)","category":"page"},{"location":"generated/Continuous-time Controlled Invariant Set/#Introduction","page":"Continuous-time Controlled Invariant Set","title":"Introduction","text":"","category":"section"},{"location":"generated/Continuous-time Controlled Invariant Set/","page":"Continuous-time Controlled Invariant Set","title":"Continuous-time Controlled Invariant Set","text":"This capsule reproduces the result of the Section 4 of [LJ21].","category":"page"},{"location":"generated/Continuous-time Controlled Invariant Set/","page":"Continuous-time Controlled Invariant Set","title":"Continuous-time Controlled Invariant Set","text":"This example considers the continuous-time constrained linear control system: beginalign* dotx_1(t)  = x_2(t)\ndotx_2(t)  = u(t) endalign* with state constraint x in -1 1^2 and input constraint u in -1 1.","category":"page"},{"location":"generated/Continuous-time Controlled Invariant Set/","page":"Continuous-time Controlled Invariant Set","title":"Continuous-time Controlled Invariant Set","text":"In order to compute controlled invariant sets for this system, we consider the projection onto the first two dimensions of controlled invariant sets of the following lifted system: beginalign* dotx_1(t)  = x_2(t)\ndotx_2(t)  = x_3(t)\ndotx_3(t)  = u(t) endalign* with state constraint x in -1 1^3.","category":"page"},{"location":"generated/Continuous-time Controlled Invariant Set/","page":"Continuous-time Controlled Invariant Set","title":"Continuous-time Controlled Invariant Set","text":"dotx(t) = Ax(t) + Bu(t)","category":"page"},{"location":"generated/Continuous-time Controlled Invariant Set/","page":"Continuous-time Controlled Invariant Set","title":"Continuous-time Controlled Invariant Set","text":"\nA = beginbmatrix\n0  1\n0  0\nendbmatrix\n\nAs shown in LTJ18 a set S is controlled invariant if\n\nbeginbmatrix\n1  Delta t\nendbmatrix\nS subseteq\nbeginbmatrix\n1  0\nendbmatrix\nS\n\n\nLJ21 B Legat and R M Jungers\n*Continuous-time controlled invariant sets a geometric approach*\n7th IFAC Conference on Analysis and Design of Hybrid Systems ADHS 2021 **2021**\n\nThe goal is to take the state vector toward a target set **XT** by visiting one of the squares\n**A** or **B** and avoiding the obstacles **O1** and **O2**\n\nThe matricial form of this system is given by dotx(t) = Ax(t) + Bu(t) where A and B are as defined below\nAs shown in Proposition 5 of LJ21 a set is controlled invariant for this system if and only if it is invariant for the algebraic system\nbeginalign*\ndotx_1(t)  = x_2(t)\ndotx_2(t)  = x_3(t)\nendalign*","category":"page"},{"location":"generated/Continuous-time Controlled Invariant Set/","page":"Continuous-time Controlled Invariant Set","title":"Continuous-time Controlled Invariant Set","text":"The matricial form of this system is given by Edotx(t) = Cx(t) where","category":"page"},{"location":"generated/Continuous-time Controlled Invariant Set/","page":"Continuous-time Controlled Invariant Set","title":"Continuous-time Controlled Invariant Set","text":"A = [0.0 1.0 0.0\n     0.0 0.0 1.0\n     0.0 0.0 0.0]\nB = reshape([0.0, 0.0, 1.0], 3, 1)\nE = [1.0 0.0 0.0\n     0.0 1.0 0.0]\nC = A[1:2, :]","category":"page"},{"location":"generated/Continuous-time Controlled Invariant Set/","page":"Continuous-time Controlled Invariant Set","title":"Continuous-time Controlled Invariant Set","text":"The invariance of a set S for this system is characterized by the following condition (see Proposition 7 of [LJ21]): forall x in partial S exists y in T_S(x) Ey = Cx The search for a set satisfying this condition can be formulated as the following set program; see [L20] for an intoduction to set programming.","category":"page"},{"location":"generated/Continuous-time Controlled Invariant Set/","page":"Continuous-time Controlled Invariant Set","title":"Continuous-time Controlled Invariant Set","text":"[L20] Legat, B. (2020). Set programming : theory and computation. Ph.D. thesis, UCLouvain.","category":"page"},{"location":"generated/Continuous-time Controlled Invariant Set/","page":"Continuous-time Controlled Invariant Set","title":"Continuous-time Controlled Invariant Set","text":"using SetProg\nfunction maximal_invariant(family, γ = nothing; dirs=dirs)\n    model = Model(sdp_solver)\n    @variable(model, S, family)\n    @constraint(model, S ⊆ □_3)\n    x = boundary_point(S, :x)\n    @constraint(model, C * x in E * tangent_cone(S, x))\n    S_2 = project(S, 1:2)\n    if γ === nothing\n        @variable(model, γ)\n    end\n    for point in dirs\n        @constraint(model, γ * point in S_2)\n    end\n    @show γ\n    @objective(model, Max, γ)\n    @show JuMP.objective_function(model)\n    JuMP.optimize!(model)\n    @show solve_time(model)\n    @show JuMP.termination_status(model)\n    @show JuMP.objective_value(model)\n    if JuMP.termination_status(model) == MOI.OPTIMAL\n        return JuMP.value(S), JuMP.objective_value(model)\n    else\n        return\n    end\nend\n\nimport GLPK\nlp_solver = optimizer_with_attributes(GLPK.Optimizer, MOI.Silent() => true, \"presolve\" => GLPK.GLP_ON)\nimport CSDP\nsdp_solver = optimizer_with_attributes(CSDP.Optimizer, MOI.Silent() => true)\nusing Polyhedra\ninterval = HalfSpace([1.0], 1.0) ∩ HalfSpace([-1.0], 1.0)\nlib = Polyhedra.DefaultLibrary{Float64}(lp_solver)\n□_2 = polyhedron(interval * interval, lib)\n□_3 = □_2 * interval\ndirs = [[-1 + √3, -1 + √3], [-1, 1]]\nall_dirs = [dirs; (-).(dirs)]\ninner = polyhedron(vrep(all_dirs), lib)\nouter = polar(inner)","category":"page"},{"location":"generated/Continuous-time Controlled Invariant Set/#Ellipsoidal-template","page":"Continuous-time Controlled Invariant Set","title":"Ellipsoidal template","text":"","category":"section"},{"location":"generated/Continuous-time Controlled Invariant Set/","page":"Continuous-time Controlled Invariant Set","title":"Continuous-time Controlled Invariant Set","text":"We start with the ellipsoidal template. We consider two different objectives (see Section 4.2 of [L20]):","category":"page"},{"location":"generated/Continuous-time Controlled Invariant Set/","page":"Continuous-time Controlled Invariant Set","title":"Continuous-time Controlled Invariant Set","text":"the volume of the set (which corresponds to log(det(Q)) or sqrtndet(Q) in the objective function) and\nthe sum of the squares of the length of its semi-axes of the polar (which corresponds to the trace of Q in the objective function).","category":"page"},{"location":"generated/Continuous-time Controlled Invariant Set/","page":"Continuous-time Controlled Invariant Set","title":"Continuous-time Controlled Invariant Set","text":"sol_ell, γ_ell = maximal_invariant(Ellipsoid(symmetric=true))\n\nusing Plots\nfunction hexcolor(rgb::UInt32)\n    r = ((0xff0000 & rgb) >> 16) / 255\n    g = ((0x00ff00 & rgb) >>  8) / 255\n    b = ((0x0000ff & rgb)      ) / 255\n    Plots.RGBA(r, g, b)\nend","category":"page"},{"location":"generated/Continuous-time Controlled Invariant Set/","page":"Continuous-time Controlled Invariant Set","title":"Continuous-time Controlled Invariant Set","text":"Values taken from http://www.toutes-les-couleurs.com/code-couleur-rvb.php","category":"page"},{"location":"generated/Continuous-time Controlled Invariant Set/","page":"Continuous-time Controlled Invariant Set","title":"Continuous-time Controlled Invariant Set","text":"lichen = hexcolor(0x85c17e)\ncanard = hexcolor(0x048b9a)\naurore = hexcolor(0xffcb60)\nframbo = hexcolor(0xc72c48)\ncols = [canard, frambo]\n\nx2 = range(0, stop=1, length=20)\nx1 = 1 .- x2.^2 / 2\nupper = [[[-1, 1]]; [[x1[i], x2[i]] for i in eachindex(x2)]]\nmci = polyhedron(vrep([upper; (-).(upper)]), lib)\npolar_mci = polar(mci)\n\nfunction _print_gauge_function(ell::SetProg.Sets.Ellipsoid, x)\n    print(\" \")\n    println(x' * round.(ell.Q, digits=3) * x)\nend\nfunction print_support_function(set::SetProg.Sets.Polar)\n    SetProg.@polyvar x[1:SetProg.Sets.dimension(set)]\n    print(\"h(S, x) =\")\n    _print_gauge_function(polar(set), x)\nend\nprint_support_function(project(sol_ell, 1:2))","category":"page"},{"location":"generated/Continuous-time Controlled Invariant Set/","page":"Continuous-time Controlled Invariant Set","title":"Continuous-time Controlled Invariant Set","text":"We can plot the primal solution as follows:","category":"page"},{"location":"generated/Continuous-time Controlled Invariant Set/","page":"Continuous-time Controlled Invariant Set","title":"Continuous-time Controlled Invariant Set","text":"function primal_plot(set, γ=nothing; npoints=256, xlim=(-1.05, 1.05), ylim=(-1.05, 1.05), args...)\n    plot(ratio=:equal, tickfont=Plots.font(12); xlim=xlim, ylim=ylim, args...)\n    plot!(□_2, color=lichen)\n    plot!(mci, color=aurore)\n    plot!(set, color=canard, npoints=npoints)\n    γ === nothing || plot!(γ * inner, color=frambo)\n    plot!()\nend\nprimal_plot(project(sol_ell, 1:2), γ_ell)","category":"page"},{"location":"generated/Continuous-time Controlled Invariant Set/","page":"Continuous-time Controlled Invariant Set","title":"Continuous-time Controlled Invariant Set","text":"and the dual plot as follows:","category":"page"},{"location":"generated/Continuous-time Controlled Invariant Set/","page":"Continuous-time Controlled Invariant Set","title":"Continuous-time Controlled Invariant Set","text":"function polar_plot(set, γ; npoints=256, xlim=(-1.5, 1.5), ylim=(-1.5, 1.5), args...)\n    plot(ratio=:equal, tickfont=Plots.font(12); xlim=xlim, ylim=ylim, args...)\n    γ === nothing || plot!(inv(γ) * outer, color=frambo)\n    plot!(polar(set), color=canard, npoints=npoints)\n    plot!(polar_mci, color=aurore)\n    plot!(polar(□_2), color=lichen)\nend\npolar_plot(project(sol_ell, 1:2), γ_ell)","category":"page"},{"location":"generated/Continuous-time Controlled Invariant Set/#Polyset-template","page":"Continuous-time Controlled Invariant Set","title":"Polyset template","text":"","category":"section"},{"location":"generated/Continuous-time Controlled Invariant Set/","page":"Continuous-time Controlled Invariant Set","title":"Continuous-time Controlled Invariant Set","text":"p4, γ4 = maximal_invariant(PolySet(symmetric=true, degree=4, convex=true), 0.91)\nγ4","category":"page"},{"location":"generated/Continuous-time Controlled Invariant Set/","page":"Continuous-time Controlled Invariant Set","title":"Continuous-time Controlled Invariant Set","text":"Below is the primal plot:","category":"page"},{"location":"generated/Continuous-time Controlled Invariant Set/","page":"Continuous-time Controlled Invariant Set","title":"Continuous-time Controlled Invariant Set","text":"primal_plot(project(p4, 1:2), γ4)","category":"page"},{"location":"generated/Continuous-time Controlled Invariant Set/","page":"Continuous-time Controlled Invariant Set","title":"Continuous-time Controlled Invariant Set","text":"and here is the polar plot:","category":"page"},{"location":"generated/Continuous-time Controlled Invariant Set/","page":"Continuous-time Controlled Invariant Set","title":"Continuous-time Controlled Invariant Set","text":"polar_plot(project(p4, 1:2), γ4)","category":"page"},{"location":"generated/Continuous-time Controlled Invariant Set/#Piecewise-semi-ellipsoidal-template","page":"Continuous-time Controlled Invariant Set","title":"Piecewise semi-ellipsoidal template","text":"","category":"section"},{"location":"generated/Continuous-time Controlled Invariant Set/","page":"Continuous-time Controlled Invariant Set","title":"Continuous-time Controlled Invariant Set","text":"sol_piece_◇, γ_piece_◇ = maximal_invariant(Ellipsoid(symmetric=true, piecewise=polar(□_3)), dirs=all_dirs)\nγ_piece_◇","category":"page"},{"location":"generated/Continuous-time Controlled Invariant Set/","page":"Continuous-time Controlled Invariant Set","title":"Continuous-time Controlled Invariant Set","text":"Below is the primal plot:","category":"page"},{"location":"generated/Continuous-time Controlled Invariant Set/","page":"Continuous-time Controlled Invariant Set","title":"Continuous-time Controlled Invariant Set","text":"primal_plot(project(sol_piece_◇, 1:2), γ_piece_◇)","category":"page"},{"location":"generated/Continuous-time Controlled Invariant Set/","page":"Continuous-time Controlled Invariant Set","title":"Continuous-time Controlled Invariant Set","text":"and here is the polar plot:","category":"page"},{"location":"generated/Continuous-time Controlled Invariant Set/","page":"Continuous-time Controlled Invariant Set","title":"Continuous-time Controlled Invariant Set","text":"polar_plot(project(sol_piece_◇, 1:2), γ_piece_◇)","category":"page"},{"location":"generated/Continuous-time Controlled Invariant Set/","page":"Continuous-time Controlled Invariant Set","title":"Continuous-time Controlled Invariant Set","text":"","category":"page"},{"location":"generated/Continuous-time Controlled Invariant Set/","page":"Continuous-time Controlled Invariant Set","title":"Continuous-time Controlled Invariant Set","text":"This page was generated using Literate.jl.","category":"page"},{"location":"#SetProg","page":"Index","title":"SetProg","text":"","category":"section"},{"location":"","page":"Index","title":"Index","text":"SetProg is a JuMP extension for Set Programming : optimization with set variables and inclusion/containment constraints. This package allows the formulation of a mathematical programming involving both classical variables and constraints supported by JuMP and set variables and constraints.","category":"page"}]
}
